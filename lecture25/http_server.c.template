/* http_server.c: simple HTTP server */

#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

#include <netdb.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>

/* Constants */
#define WHITESPACE      " \t\n"

/* Macros */
#ifdef NDEBUG
#define debug(M, ...)
#else
#define debug(M, ...)   fprintf(stderr, "[%5d] DEBUG %10s:%-4d " M "\n", getpid(), __FILE__, __LINE__, ##__VA_ARGS__)
#endif
#define log(M, ...)     fprintf(stderr, "[%5d] LOG   %10s:%-4d " M "\n", getpid(), __FILE__, __LINE__, ##__VA_ARGS__)

/* Allocate a socket, bind it to port, and start listening */
int socket_listen(const char *port) {
    // TODO: Lookup server address information

    // TODO: For each address entry, allocate socket, bind, and listen
        // TODO: Allocate socket

        // TODO: Bind socket to port

        // TODO: Listen on socket

    return 0;
}

/* Accept an incoming client and return client stream */
FILE *accept_client(int server_fd) {
    // TODO: Accept incoming connection

    // TODO: Open a file stream from socket file descriptor
    return NULL;
}

/* Handle request */
void handle_request(FILE *client_file) {
    // TODO: Parse URI
    debug("METHOD = %s", method);
    debug("URI    = %s", uri);

    // TODO: Skip Headers
    
    // TODO: Return message

    return;
}

/* Main Execution */

int main(int argc, char *argv[]) {
    // TODO: Listen to socket

    debug("Listening on port: %s", port);

    // TODO: Process incoming connections
    while (1) {
        // TODO: Accept an incoming connection
        debug("Accepting client request");
    
        // TODO: Handle client request
    }

    return EXIT_SUCCESS;
}

/* vim: set sts=4 sw=4 ts=8 expandtab ft=c: */
